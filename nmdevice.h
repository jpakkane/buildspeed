/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -p nmdevice.h -c NetworkManagerDevice nmwirelessdevice.xml org.freedesktop.NetworkManager.Device
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef NMDEVICE_H_1417012193
#define NMDEVICE_H_1417012193

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.NetworkManager.Device
 */
class NetworkManagerDevice: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.Device"; }

public:
    NetworkManagerDevice(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~NetworkManagerDevice();

    Q_PROPERTY(QDBusObjectPath ActiveConnection READ activeConnection)
    inline QDBusObjectPath activeConnection() const
    { return qvariant_cast< QDBusObjectPath >(property("ActiveConnection")); }

    Q_PROPERTY(bool Autoconnect READ autoconnect WRITE setAutoconnect)
    inline bool autoconnect() const
    { return qvariant_cast< bool >(property("Autoconnect")); }
    inline void setAutoconnect(bool value)
    { setProperty("Autoconnect", QVariant::fromValue(value)); }

    Q_PROPERTY(QList<QDBusObjectPath> AvailableConnections READ availableConnections)
    inline QList<QDBusObjectPath> availableConnections() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("AvailableConnections")); }

    Q_PROPERTY(uint DeviceType READ deviceType)
    inline uint deviceType() const
    { return qvariant_cast< uint >(property("DeviceType")); }

    Q_PROPERTY(QDBusObjectPath Dhcp4Config READ dhcp4Config)
    inline QDBusObjectPath dhcp4Config() const
    { return qvariant_cast< QDBusObjectPath >(property("Dhcp4Config")); }

    Q_PROPERTY(QDBusObjectPath Dhcp6Config READ dhcp6Config)
    inline QDBusObjectPath dhcp6Config() const
    { return qvariant_cast< QDBusObjectPath >(property("Dhcp6Config")); }

    Q_PROPERTY(bool FirmwareMissing READ firmwareMissing)
    inline bool firmwareMissing() const
    { return qvariant_cast< bool >(property("FirmwareMissing")); }

    Q_PROPERTY(QDBusObjectPath Ip4Config READ ip4Config)
    inline QDBusObjectPath ip4Config() const
    { return qvariant_cast< QDBusObjectPath >(property("Ip4Config")); }

    Q_PROPERTY(QDBusObjectPath Ip6Config READ ip6Config)
    inline QDBusObjectPath ip6Config() const
    { return qvariant_cast< QDBusObjectPath >(property("Ip6Config")); }

    Q_PROPERTY(bool Managed READ managed)
    inline bool managed() const
    { return qvariant_cast< bool >(property("Managed")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Disconnect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void StateChanged(uint in0, uint in1, uint in2);
};

#endif
