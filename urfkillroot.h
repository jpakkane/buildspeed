/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p urfkillroot.h -c UrfkillRoot urfkill.xml org.freedesktop.URfkill
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef URFKILLROOT_H_1416318290
#define URFKILLROOT_H_1416318290

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.URfkill
 */
class UrfkillRoot: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.URfkill"; }

public:
    UrfkillRoot(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~UrfkillRoot();

    Q_PROPERTY(QString DaemonVersion READ daemonVersion)
    inline QString daemonVersion() const
    { return qvariant_cast< QString >(property("DaemonVersion")); }

    Q_PROPERTY(bool KeyControl READ keyControl)
    inline bool keyControl() const
    { return qvariant_cast< bool >(property("KeyControl")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> Block(uint type, bool block)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(block);
        return asyncCallWithArgumentList(QLatin1String("Block"), argumentList);
    }

    inline QDBusPendingReply<bool> BlockIdx(uint index, bool block)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index) << QVariant::fromValue(block);
        return asyncCallWithArgumentList(QLatin1String("BlockIdx"), argumentList);
    }

    inline QDBusPendingReply<QList<QDBusObjectPath> > EnumerateDevices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EnumerateDevices"), argumentList);
    }

    inline QDBusPendingReply<bool> FlightMode(bool block)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(block);
        return asyncCallWithArgumentList(QLatin1String("FlightMode"), argumentList);
    }

    inline QDBusPendingReply<uint> Inhibit(const QString &reason)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(reason);
        return asyncCallWithArgumentList(QLatin1String("Inhibit"), argumentList);
    }

    inline QDBusPendingReply<bool> IsFlightMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsFlightMode"), argumentList);
    }

    inline QDBusPendingReply<bool> IsInhibited()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsInhibited"), argumentList);
    }

    inline QDBusPendingReply<> Uninhibit(uint inhibit_cookie)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(inhibit_cookie);
        return asyncCallWithArgumentList(QLatin1String("Uninhibit"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DeviceAdded(const QDBusObjectPath &device);
    void DeviceChanged(const QDBusObjectPath &device);
    void DeviceRemoved(const QDBusObjectPath &device);
    void FlightModeChanged(bool flight_mode);
    void UrfkeyPressed(int keycode);
};

#endif

