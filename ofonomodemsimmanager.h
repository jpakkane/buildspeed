/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -p ofonomodemsimmanager.h -c OfonoModemSimManager ofonomodem.xml org.ofono.SimManager
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OFONOMODEMSIMMANAGER_H_1416485549
#define OFONOMODEMSIMMANAGER_H_1416485549

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.ofono.SimManager
 */
class OfonoModemSimManager: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.ofono.SimManager"; }

public:
    OfonoModemSimManager(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OfonoModemSimManager();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ChangePin(const QString &type, const QString &oldpin, const QString &newpin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(oldpin) << QVariant::fromValue(newpin);
        return asyncCallWithArgumentList(QLatin1String("ChangePin"), argumentList);
    }

    inline QDBusPendingReply<> EnterPin(const QString &type, const QString &pin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(pin);
        return asyncCallWithArgumentList(QLatin1String("EnterPin"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> GetIcon(uchar id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("GetIcon"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetProperties"), argumentList);
    }

    inline QDBusPendingReply<> LockPin(const QString &type, const QString &pin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(pin);
        return asyncCallWithArgumentList(QLatin1String("LockPin"), argumentList);
    }

    inline QDBusPendingReply<> ResetPin(const QString &type, const QString &puk, const QString &newpin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(puk) << QVariant::fromValue(newpin);
        return asyncCallWithArgumentList(QLatin1String("ResetPin"), argumentList);
    }

    inline QDBusPendingReply<> SetProperty(const QString &property, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(property) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("SetProperty"), argumentList);
    }

    inline QDBusPendingReply<> UnlockPin(const QString &type, const QString &pin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(pin);
        return asyncCallWithArgumentList(QLatin1String("UnlockPin"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertyChanged(const QString &name, const QDBusVariant &value);
};

#endif
